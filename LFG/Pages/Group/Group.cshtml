@page "/Group/{groupname}"

@model GroupModel
@{
  ViewData["Title"] = "Group";
}

<div class="profile-heading">
  <h1>@Model.Group.Name</h1>
  @if (Model.Owner.Username == User.Identity.Name)
  {
    <div class="buttons edit-button">
      <a asp-page="/Group/EditGroup" asp-route-username="@RouteData.Values["groupname"]">Edit</a>
    </div>
  }
  @if (Model.UserGroup == null && Model.Group.Public)
  {
    <form id="join-form" method="post" asp-page-handler="Join"></form>
    <button class="buttons join-button" form="join-form">
      Join
    </button>
  }
</div>
<div class="group-card">
  <partial name="Shared/_DefaultGroupAvatarPartial" />
  <div class="group-info">
    <h2>@Model.Group.Name</h2>
    <p><b>Owner: </b>@Model.Owner.Username</p>
    <p><b>Created: </b>@Model.Group.Created.ToString("MMMM d, yyyy")</p>
    @if (Model.Group.Description != null)
    {
      <p><b>Bio: </b>@Model.Group.Description</p>
    }
    <p><b>Status: </b>@Model.Group.Status</p>
  </div>
</div>
@if (@Model.GroupGames.Count > 0)
{
  <button id="toggle-games" onclick="toggleGames()">Show Games</button>
  <div id="games-list">
    <h1>Games</h1>
    <div class="group_games">
      @foreach (var game in Model.GroupGames)
      {
        <a asp-page="/Game/@game.Name">
          <div class="game-card">
            <partial name="Shared/_DefaultGameCoverPartial"/>
            <h3 class="game-name">@game.Name</h3>
          </div>
        </a>
      }
    </div>
  </div>
}
<div class="start-a-thread-group">
  <button id="start-a-thread-button" onclick="toggleStartAThread()">Start A Thread</button>
  <div id="start-a-thread" style="height: 0rem;">
    <div class="start-a-thread-block">
      <form id="start-a-thread-form" method="post" asp-page-handler="CreateThread">
        <div class="thread-form-item">
          <label asp-for="Thread.Title"></label>
          <input type="text" asp-for="Thread.Title" required/>
        </div>
        <div class="thread-form-item">
          <label asp-for="Thread.Body"></label>
          <textarea class="thread-form-body" asp-for="Thread.Body" maxlength="40000" required></textarea>
        </div>
        <div class="thread-form-item">
          <label asp-for="Thread.Pinned"></label>
          <input class="pinned-checkbox" type="checkbox" asp-for="Thread.Pinned"/>
        </div>
        <button type="submit">Create</button>
      </form>
    </div>
  </div>
</div>
@if (@Model.UserGroup != null)
{
  <div class="threads">
    @foreach (var thread in Model.GroupThreads)
    {
      <div class="thread-group">
        <div class="vote-block">
          <button id="thread-upvote-@thread.Id" class="bi bi-caret-up-fill vote-option up-vote" onclick="upvoteThread(@thread.Id)"></button>
          <h2 id="thread-rating-@thread.Id">@thread.Rating</h2>
          <button id="thread-downvote-@thread.Id" class="bi bi-caret-down-fill vote-option down-vote" onclick="downvoteThread(@thread.Id)"></button>
        </div>
        <div class="thread-block">
          <div id="thread-@thread.Id" class="thread-block-content" style="display: flex">
            @if (@thread.Pinned)
            {
              <p class="thread-pinned"><b>Pinned</b></p>
            }
            <h2 class="thread-title">@thread.Title</h2>
            <a asp-page="/Profile/Profile" asp-route-username="@thread.User.Username">@thread.User.Username</a>
            <p class="thread-created">@Model.GetPrettyDate(thread.Created)</p>
            <p>@thread.Body</p>
          </div>
          <div id="edit-thread-@thread.Id" class="edit-thread-block" style="display: none">
            <form method="post" asp-page-handler="UpdateGroupThread" asp-route-threadId="@thread.Id">
              <div class="thread-form-item">
                <label asp-for="Thread.Title"></label>
                <input type="text" asp-for="Thread.Title" value="@thread.Title" required/>
              </div>
              <div class="thread-form-item">
                <label asp-for="Thread.Body"></label>
                <textarea class="thread-form-body" name="@Html.NameFor(n => n.Thread.Body)" maxlength="40000" required>@thread.Body</textarea>
              </div>
              <div class="thread-form-item">
                <label asp-for="Thread.Pinned"></label>
                <input class="pinned-checkbox" type="checkbox" asp-for="Thread.Pinned" checked="@thread.Pinned"/>
              </div>
              <button type="submit">Update</button>
            </form>
          </div>
          @if (@thread.UserId == Model.User.Id)
          {
            <div class="thread-options-block">
              <p class="edit" onclick="threadEditMode(@thread.Id)"><b>Edit</b></p>
              <div class="delete-block">
                <p class="text-danger delete" onclick="showConfirmDelete(@thread.Id)"><b>Delete</b></p>
                <div id="confirm-delete-@thread.Id" class="confirm-delete">
                  <p class="text-center"><b>Are you sure you want to delete this thread?</b></p>
                  <div class="confirm-delete-button-group">
                    <form id="delete-form" method="post" asp-page-handler="DeleteThread" asp-route-threadId="@thread.Id"></form>
                    <button class="confirm-delete-button" form="delete-form">Yes</button>
                    <button class="cancel-delete-button" onclick="hideConfirmDelete(@thread.Id)">No</button>
                  </div>
                </div>
              </div>
            </div>
          }
          <button class="show-comments bi bi-chat-left" onclick="showComments(@thread.Id)"></button>
          <div id="comments-@thread.Id" class="thread-comments">
            <div class="comment-form-group">
              <form id="comment-form" method="post" asp-page-handler="CreateComment" asp-route-threadId="@thread.Id">
                <textarea class="comment-form-body" asp-for="Comment.Body" placeholder="Leave a comment"></textarea>
                <button class="bi bi-arrow-right-short" type="submit"></button>
              </form>
            </div>
            @{
              var comments = @Model.GetThreadComments(@thread.Id);
              if (comments.Result.Count == 0)
              {
                <p class="no-comments">No comments yet</p>
                <hr/>
              }

              foreach (var comment in await comments)
              {
                <div class="comment-group">
                  <div class="vote-block comment-vote-block">
                    <button id="comment-upvote-@comment.Id" class="bi bi-caret-up-fill vote-option comment-up-vote comment-vote-option" onclick="upvoteComment(@comment.Id)"></button>
                    <h2 id="comment-rating-@comment.Id">@comment.Rating</h2>
                    <button id="comment-downvote-@comment.Id" class="bi bi-caret-down-fill vote-option comment-down-vote comment-vote-option" onclick="downvoteComment(@comment.Id)"></button>
                  </div>
                  <div class="comment-block">
                    <div id="comment-@comment.Id" class="comment-block-content" style="display: block">
                      <a asp-page="/Profile/Profile" asp-route-username="@comment.User.Username">@comment.User.Username</a>
                      <p class="comment-created">@Model.GetPrettyDate(comment.Created)</p>
                      <p>@comment.Body</p>
                    </div>
                    <div id="edit-comment-@comment.Id" class="edit-comment-block" style="display: none">
                      <form id="edit-comment-form" method="post" asp-page-handler="UpdateComment" asp-route-threadId="@thread.Id" asp-route-commentId="@comment.Id">
                        <textarea class="edit-comment-form-body" name="@Html.NameFor(n => n.Comment.Body)">@comment.Body</textarea>
                        <button class="bi bi-arrow-right-short" type="submit"></button>
                      </form>
                    </div>
                    @if (@comment.UserId == Model.User.Id)
                    {
                      <div class="comment-options-block">
                        <p class="edit" onclick="commentEditMode(@comment.Id)"><b>Edit</b></p>
                        <div class="delete-block">
                          <p class="text-danger delete" onclick="showConfirmDeleteComment(@comment.Id)"><b>Delete</b></p>
                          <div id="confirm-delete-comment-@comment.Id" class="confirm-delete">
                            <p class="text-center"><b>Are you sure you want to delete this comment?</b></p>
                            <div class="confirm-delete-button-group">
                              <form id="comment-delete-form" method="post" asp-page-handler="DeleteComment" asp-route-commentId="@comment.Id"></form>
                              <button class="confirm-delete-button" form="comment-delete-form">Yes</button>
                              <button class="cancel-delete-button" onclick="hideConfirmDeleteComment(@comment.Id)">No</button>
                            </div>
                          </div>
                        </div>
                      </div>
                    }
                    <hr/>
                  </div>
                </div>
              }
            }
          </div>
        </div>
      </div>
    }
  </div>
}

@section Scripts
{
  <script src="~/lib/jquery/dist/jquery.js"></script>
  <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
  <script src="~/js/threadrating.js"></script>
  <script src="~/js/commentrating.js"></script>
  <script type="text/javascript">
    function toggleGames() {
      const gamesList = document.getElementById("games-list");
      const toggleGames = document.getElementById("toggle-games");

      if (gamesList.style.display === "block") {
        gamesList.style.display = "none";
        toggleGames.innerHTML = "Show Games";
      } else {
        gamesList.style.display = "block";
        toggleGames.innerHTML = "Hide Games";
      }
    }

    function toggleStartAThread() {
      const startAThread = document.getElementById("start-a-thread");
      const startAThreadForm = document.getElementById("start-a-thread-form");

      if (startAThread.style.height === "0rem") {
        startAThread.style.height = "27rem";
        startAThreadForm.style.opacity = "1";
      } else {
        startAThread.style.height = "0rem";
        startAThreadForm.style.opacity = "0";
      }
    }

    function showComments(threadId) {
      const threadComments = document.getElementById(`comments-${threadId}`);

      if (threadComments.style.display === "block") {
        threadComments.style.display = "none";
      } else {
        threadComments.style.display = "block";
      }
    }

    function upvoteThread(threadId) {
      var token = $('input[name="__RequestVerificationToken"]').val();
      $.ajax({
        url: `?threadId=${threadId}&handler=UpvoteThread`,
        type: 'POST',
        data: {
          __RequestVerificationToken: token
        }
      });
    }

    function downvoteThread(threadId) {
      var token = $('input[name="__RequestVerificationToken"]').val();
      $.ajax({
        url: `?threadId=${threadId}&handler=DownvoteThread`,
        type: 'POST',
        data: {
          __RequestVerificationToken: token
        }
      });
    }

    function upvoteComment(commentId) {
      var token = $('input[name="__RequestVerificationToken"]').val();
      $.ajax({
        url: `?commentId=${commentId}&handler=UpvoteComment`,
        type: 'POST',
        data: {
          __RequestVerificationToken: token
        }
      });
    }

    function downvoteComment(commentId) {
      var token = $('input[name="__RequestVerificationToken"]').val();
      $.ajax({
        url: `?commentId=${commentId}&handler=DownvoteComment`,
        type: 'POST',
        data: {
          __RequestVerificationToken: token
        }
      });
    }

    function threadEditMode(threadId) {
      const thread = document.getElementById(`thread-${threadId}`);
      const threadEdit = document.getElementById(`edit-thread-${threadId}`);

      if (thread.style.display === "flex") {
        thread.style.display = "none";
        threadEdit.style.display = "flex";
      } else {
        thread.style.display = "flex";
        threadEdit.style.display = "none";
      }
    }

    function commentEditMode(commentId) {
      const comment = document.getElementById(`comment-${commentId}`);
      const commentEdit = document.getElementById(`edit-comment-${commentId}`);

      if (comment.style.display === "block") {
        comment.style.display = "none";
        commentEdit.style.display = "block";
      } else {
        comment.style.display = "block";
        commentEdit.style.display = "none";
      }
    }

    function showConfirmDelete(threadId) {
      const confirmDelete = document.getElementById(`confirm-delete-${threadId}`);

      confirmDelete.style.display = "flex";
    }

    function hideConfirmDelete(threadId) {
      const confirmDelete = document.getElementById(`confirm-delete-${threadId}`);

      confirmDelete.style.display = "none";
    }

    function showConfirmDeleteComment(commentId) {
      const confirmDelete = document.getElementById(`confirm-delete-comment-${commentId}`);

      confirmDelete.style.display = "flex";
    }

    function hideConfirmDeleteComment(commentId) {
      const confirmDelete = document.getElementById(`confirm-delete-comment-${commentId}`);

      confirmDelete.style.display = "none";
    }
  </script>
}