@page "/Group/{groupname}"

@using System.Collections
@using LFG.Models
@model GroupModel
@{
  ViewData["Title"] = "Group";
}

<div class="profile-heading">
  <h1>@Model.Group.Name</h1>
  @if (Model.Owner.Username == User.Identity.Name)
  {
    <div class="buttons edit-button">
      <a asp-page="/Group/EditGroup" asp-route-username="@RouteData.Values["groupname"]">Edit</a>
    </div>
  }
  @if (Model.UserGroup == null && Model.Group.Public)
  {
    <form id="join-form" method="post" asp-page-handler="Join"></form>
    <button class="buttons join-button" form="join-form">
      Join
    </button>
  }
</div>
<div class="group-card">
  <partial name="Shared/_DefaultGroupAvatarPartial" />
  <div class="group-info">
    <h2>@Model.Group.Name</h2>
    <p><b>Owner: </b>@Model.Owner.Username</p>
    <p><b>Created: </b>@Model.Group.Created.ToString("MMMM d, yyyy")</p>
    @if (Model.Group.Description != null)
    {
      <p><b>Bio: </b>@Model.Group.Description</p>
    }
    <p><b>Status: </b>@Model.Group.Status</p>
  </div>
</div>
@if (Model.GroupGames.Count > 0)
{
  <button id="toggle-games" onclick="toggleGames()">Show Games</button>
  <div id="games-list">
    <h1>Games</h1>
    <div class="group_games">
      @foreach (var game in Model.GroupGames)
      {
        <a asp-page="/Game/@game.Name">
          <div class="game-card">
            <partial name="Shared/_DefaultGameCoverPartial"/>
            <h3 class="game-name">@game.Name</h3>
          </div>
        </a>
      }
    </div>
  </div>
}
<div class="start-a-thread-group">
  <button id="start-a-thread-button" onclick="toggleStartAThread()">Start A Thread</button>
  <div id="start-a-thread" style="height: 0rem;">
    <div class="start-a-thread-block">
      <form id="start-a-thread-form">
        @Html.AntiForgeryToken()
        <div class="thread-form-item">
          <label asp-for="Thread.Title"></label>
          <input type="text" asp-for="Thread.Title" required/>
        </div>
        <div class="thread-form-item">
          <label asp-for="Thread.Body"></label>
          <textarea class="thread-form-body" asp-for="Thread.Body" maxlength="40000" required></textarea>
        </div>
        <div class="thread-form-item">
          <label asp-for="Thread.Pinned"></label>
          <input class="pinned-checkbox" type="checkbox" asp-for="Thread.Pinned"/>
        </div>
        <button type="submit" onclick="toggleStartAThread()">Create</button>
      </form>
    </div>
  </div>
</div>
@if (Model.UserGroup != null)
{
  <div id="threads" class="threads">
    <partial name="Shared/_GroupThreadsPartial" model="Model"/>
  </div>
}

@section Scripts
{
  <script src="~/lib/jquery/dist/jquery.js"></script>
  <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
  <script src="~/js/threadrating.js"></script>
  <script src="~/js/commentrating.js"></script>
  <script src="~/js/grouppage.js"></script>
  <script type="text/javascript">

    @* Toggle Group Games List *@
    function toggleGames() {
      const gamesList = document.getElementById("games-list");
      const toggleGames = document.getElementById("toggle-games");

      if (gamesList.style.display === "block") {
        gamesList.style.display = "none";
        toggleGames.innerHTML = "Show Games";
      } else {
        gamesList.style.display = "block";
        toggleGames.innerHTML = "Hide Games";
      }
    }

    @* Toggle Create Thread Form *@
    function toggleStartAThread() {
      const startAThread = document.getElementById("start-a-thread");
      const startAThreadForm = document.getElementById("start-a-thread-form");

      if (startAThread.style.height === "0rem") {
        startAThread.style.height = "27rem";
        startAThreadForm.style.opacity = "1";
      } else {
        startAThread.style.height = "0rem";
        startAThreadForm.style.opacity = "0";
      }
    }

    @* Create Thread *@
    $(document).on("submit", "#start-a-thread-form", function(e) {
      e.preventDefault();
      var form = $(this);
        
      $.ajax({
        url: `?handler=CreateThread`,
        type: 'POST',
        data: form.serialize()
      });
    });

    @* Edit Thread *@
    $(document).on("submit", "#edit-thread-form", function (e) {
      e.preventDefault();
      var form = $(this);
      var threadId = form.find("#threadId").val();

      $.ajax({
        url: `?threadId=${threadId}&handler=UpdateGroupThread`,
        type: 'POST',
        data: form.serialize()
      });
    });

    @* Delete Thread *@
    $(document).on("submit", "#delete-thread-form", function (e) {
      e.preventDefault();
      var form = $(this);
      var threadId = form.find("#threadId").val();

      $.ajax({
        url: `?threadId=${threadId}&handler=DeleteThread`,
        type: 'POST',
        data: form.serialize()
      });
    });

    @* Create Comment *@
    $(document).on("submit", "#comment-form", function (e) {
      e.preventDefault();
      var form = $(this);
      var threadId = form.find("#threadId").val();

      $.ajax({
        url: `?threadId=${threadId}&handler=CreateComment`,
        type: 'POST',
        data: form.serialize()
      });
    });

    @* Edit Comment *@
    $(document).on("submit", "#edit-comment-form", function (e) {
      e.preventDefault();
      var form = $(this);
      console.log(form);
      var threadId = form.find("#threadId").val();
      var commentId = form.find("#commentId").val();

      $.ajax({
        url: `?threadId=${threadId}&commentId=${commentId}&handler=UpdateComment`,
        type: 'POST',
        data: form.serialize()
      });
    });

    @* Delete Comment *@
    $(document).on("submit", "#comment-delete-form", function (e) {
      e.preventDefault();
      var form = $(this);
      var commentId = form.find("#commentId").val();

      $.ajax({
        url: `?commentId=${commentId}&handler=DeleteComment`,
        type: 'POST',
        data: form.serialize()
      });
    });

    @* Toggle Thread Comments List *@
    function showComments(threadId) {
      const threadComments = document.getElementById(`comments-${threadId}`);

      if (threadComments.style.display === "block") {
        threadComments.style.display = "none";
      } else {
        threadComments.style.display = "block";
      }
    }

    @* Upvote Thread *@
    function upvoteThread(threadId) {
      var token = $('input[name="__RequestVerificationToken"]').val();
      $.ajax({
        url: `?threadId=${threadId}&handler=UpvoteThread`,
        type: 'POST',
        data: {
          __RequestVerificationToken: token
        }
      });
    }

    @* Downvote Thread *@
    function downvoteThread(threadId) {
      var token = $('input[name="__RequestVerificationToken"]').val();
      $.ajax({
        url: `?threadId=${threadId}&handler=DownvoteThread`,
        type: 'POST',
        data: {
          __RequestVerificationToken: token
        }
      });
    }

    @* Upvote Comment *@
    function upvoteComment(commentId) {
      var token = $('input[name="__RequestVerificationToken"]').val();
      $.ajax({
        url: `?commentId=${commentId}&handler=UpvoteComment`,
        type: 'POST',
        data: {
          __RequestVerificationToken: token
        }
      });
    }

    @* Downvote Comment *@
    function downvoteComment(commentId) {
      var token = $('input[name="__RequestVerificationToken"]').val();
      $.ajax({
        url: `?commentId=${commentId}&handler=DownvoteComment`,
        type: 'POST',
        data: {
          __RequestVerificationToken: token
        }
      });
    }

    @* Toggle Edit Thread Form *@
    function threadEditMode(threadId) {
      const thread = document.getElementById(`thread-${threadId}`);
      const threadEdit = document.getElementById(`edit-thread-${threadId}`);

      if (thread.style.display === "flex") {
        thread.style.display = "none";
        threadEdit.style.display = "flex";
      } else {
        thread.style.display = "flex";
        threadEdit.style.display = "none";
      }
    }

    @* Toggle Edit Comment Form *@
    function commentEditMode(commentId) {
      const comment = document.getElementById(`comment-${commentId}`);
      const commentEdit = document.getElementById(`edit-comment-${commentId}`);

      if (comment.style.display === "block") {
        comment.style.display = "none";
        commentEdit.style.display = "block";
      } else {
        comment.style.display = "block";
        commentEdit.style.display = "none";
      }
    }

    @* Show Delete Thread Prompt *@
    function showConfirmDelete(threadId) {
      const confirmDelete = document.getElementById(`confirm-delete-${threadId}`);

      confirmDelete.style.display = "flex";
    }

    @* Hide Delete Thread Prompt *@
    function hideConfirmDelete(threadId) {
      const confirmDelete = document.getElementById(`confirm-delete-${threadId}`);

      confirmDelete.style.display = "none";
    }

    @* Show Delete Comment Prompt *@
    function showConfirmDeleteComment(commentId) {
      const confirmDelete = document.getElementById(`confirm-delete-comment-${commentId}`);

      confirmDelete.style.display = "flex";
    }

    @* Hide Delete Comment Prompt *@
    function hideConfirmDeleteComment(commentId) {
      const confirmDelete = document.getElementById(`confirm-delete-comment-${commentId}`);

      confirmDelete.style.display = "none";
    }
  </script>
}