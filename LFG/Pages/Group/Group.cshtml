@page "/Group/{groupname}"

@model GroupModel
@{
  ViewData["Title"] = "Group";
}

<div class="profile-heading">
  <h1>@Model.Group.Name</h1>
  @if (@Model.Owner.Username == User.Identity.Name)
  {
    <div class="buttons edit-button">
      <a asp-page="/Group/EditGroup" asp-route-username="@RouteData.Values["groupname"]">Edit</a>
    </div>
  }
  @if (@Model.UserGroup == null && @Model.Group.Public)
  {
    <form id="join-form" method="post" asp-page-handler="Join"></form>
      <button class="buttons join-button" form="join-form">
        Join
      </button>
    
  }
</div>
<div class="group-card">
  <partial name="Shared/_DefaultGroupAvatarPartial" />
  <div class="group-info">
    <h2>@Model.Group.Name</h2>
    <p><b>Owner: </b>@Model.Owner.Username</p>
    <p><b>Created: </b>@Model.Group.Created.ToString("MMMM d, yyyy")</p>
    @if (@Model.Group.Description != null)
    {
      <p><b>Bio: </b>@Model.Group.Description</p>
    }
    <p><b>Status: </b>@Model.Group.Status</p>
  </div>
</div>
@if (@Model.GroupGames.Count > 0)
{
  <button id="toggle-games" onclick="toggleGames()">Show Games</button>
  <div id="games-list">
    <h1>Games</h1>
    <div class="group_games">
      @foreach (var game in @Model.GroupGames)
      {
        <a asp-page="/Game/@game.Name">
          <div class="game-card">
            <partial name="Shared/_DefaultGameCoverPartial"/>
            <h3 class="game-name">@game.Name</h3>
          </div>
        </a>
      }
    </div>
  </div>
}
@if (@Model.UserGroup != null)
{
  <div class="threads">
    @foreach (var thread in @Model.GroupThreads)
    {
      <div class="thread-group">
        <div class="vote-block">
          <button id="thread-upvote-@thread.Id" class="bi bi-caret-up-fill vote-option up-vote" onclick="upvote(@thread.Id)"></button>
          <h2 id="thread-rating-@thread.Id">@thread.Rating</h2>
          <button id="thread-downvote-@thread.Id" class="bi bi-caret-down-fill vote-option down-vote" onclick="downvote(@thread.Id)"></button>
        </div>
        <div class="thread-block">
          @if (@thread.Pinned)
          {
            <p class="thread-pinned"><b>Pinned</b></p>
          }
          <h2 class="thread-title">@thread.Title</h2>
          <a asp-page="/Profile/Profile" asp-route-username="@thread.User.Username">@thread.User.Username</a>
          <p class="thread-created">@Model.GetPrettyDate(thread.Created)</p>
          <p>@thread.Body</p>
          <button class="show-comments bi bi-chat-left" onclick="showComments(@thread.Id)"></button>
          <div id="comments-@thread.Id" class="thread-comments">
            @{
              var comments = @Model.GetThreadComments(@thread.Id);
              foreach (var comment in await comments)
              {
                <div class="comment-group">
                  <div class="vote-block comment-vote-block">
                    <button class="bi bi-caret-up-fill vote-option up-vote comment-vote-option" onclick=""></button>
                    <h2 id="comment-rating">@comment.Rating</h2>
                    <button class="bi bi-caret-down-fill vote-option down-vote comment-vote-option" onclick=""></button>
                  </div>
                  <div class="comment-block">
                    <a asp-page="/Profile/Profile" asp-route-username="@comment.User.Username">@comment.User.Username</a>
                    <p class="comment-created">@Model.GetPrettyDate(comment.Created)</p>
                    <p>@comment.Body</p>
                    <hr/>
                  </div>
                </div>
              }
            }
          </div>
        </div>
      </div>
    }
  </div>
}

@section Scripts
{
  <script src="~/lib/jquery/dist/jquery.js"></script>
  <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
  <script src="~/js/rating.js"></script>
  <script type="text/javascript">
    function toggleGames() {
      const gamesList = document.getElementById("games-list");
      const toggleGames = document.getElementById("toggle-games");

      if (gamesList.style.display === "block") {
        gamesList.style.display = "none";
        toggleGames.innerHTML = "Show Games";
      } else {
        gamesList.style.display = "block";
        toggleGames.innerHTML = "Hide Games";
      }
    }

    function showComments(threadId) {
      const threadComments = document.getElementById(`comments-${threadId}`);

      if (threadComments.style.display === "block") {
        threadComments.style.display = "none";
      } else {
        threadComments.style.display = "block";
      }
    }

    function upvote(threadId) {
      var token = $('input[name="__RequestVerificationToken"]').val();
      $.ajax({
        url: `?threadId=${threadId}&handler=Upvote`,
        type: 'POST',
        data: {
          __RequestVerificationToken: token
        }
      });
    }

    function downvote(threadId) {
      var token = $('input[name="__RequestVerificationToken"]').val();
      $.ajax({
        url: `?threadId=${threadId}&handler=Downvote`,
        type: 'POST',
        data: {
          __RequestVerificationToken: token
        }
      });
    }
  </script>
}